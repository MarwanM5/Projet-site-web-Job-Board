{"ast":null,"code":"import axios from 'axios';\naxios.defaults.baseURL = 'http://localhost:8080';\naxios.interceptors.request.use(config => {\n  const token = localStorage.getItem('userToken');\n  if (token) {\n    config.headers['Authorization'] = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n/**\n * Retrieves all job applications from the API.\n *\n * @return {Promise} A promise that resolves to the response data.\n */\nfunction getJobApplications() {\n  return axios.get('/api/job_applications');\n}\n\n/**\n * Retrieves a job application by its ID.\n *\n * @param {number} id - The ID of the job application.\n * @return {Promise} A promise that resolves to the job application data.\n */\nfunction getJobApplicationById(id) {\n  return axios.get(`/api/job_applications/${id}`);\n}\n\n/**\n * Retrieves a job application by its poste ID.\n *\n * @param {number} id - The ID of the poste.\n * @return {Promise} A promise that resolves to the job application object.\n */\nfunction getJobApplicationByIdPoste(id) {\n  return axios.get(`/api/job_applications/poste/${id}`);\n}\n\n/**\n * Retrieves a job application by the ID of the person.\n *\n * @param {number} id - The ID of the person.\n * @return {Promise} A promise that resolves to the job application data.\n */\nfunction getJobApplicationByIdPerson(id) {\n  return axios.get(`/api/job_applications/person/${id}`);\n}\n\n/**\n * Creates a job application.\n *\n * @param {object} jobApplication - The job application to be created.\n * @param {number} jobApplication.advertisement_id - The ID of the advertisement.\n * @param {number} jobApplication.person_id - The ID of the person.\n * @param {boolean} jobApplication.email_sent - Indicates if email was sent.\n * @param {string} jobApplication.status - The status of the application.\n * @return {Promise} A promise that resolves to the created job application.\n */\nfunction createJobApplication(jobApplication) {\n  const data = {\n    id: 0,\n    advertissement: {\n      id: jobApplication.advertisement_id\n    },\n    person: {\n      id: jobApplication.person_id\n    },\n    email_sent: jobApplication.email_sent,\n    status: jobApplication.status\n  };\n  return axios.post('/api/job_applications', data);\n}\n\n/**\n * Updates a job application.\n *\n * @param {object} jobApplication - The job application to be updated.\n * @param {number} jobApplication.advertisement_id - The ID of the advertisement.\n * @param {number} jobApplication.person_id - The ID of the person.\n * @param {boolean} jobApplication.email_sent - Indicates if email was sent.\n * @param {string} jobApplication.status - The status of the application.\n * @return {Promise} A promise that resolves to the updated job application.\n */\nfunction updateJobApplication(jobApplication) {\n  const data = {\n    id: jobApplication.id,\n    advertissement: {\n      id: jobApplication.advertisement_id\n    },\n    person: {\n      id: jobApplication.person_id\n    },\n    email_sent: jobApplication.email_sent,\n    status: jobApplication.status\n  };\n  return axios.put(`/api/job_applications/`, data);\n}\n\n/**\n * Deletes a job application with the given ID.\n *\n * @param {number} id - The ID of the job application to delete.\n * @return {Promise} A promise that resolves to the result of the deletion.\n */\nfunction deleteJobApplication(id) {\n  return axios.delete(`/api/job_applications/${id}`);\n}\nconst jobApplicationsService = {\n  getJobApplications,\n  getJobApplicationById,\n  getJobApplicationByIdPerson,\n  getJobApplicationByIdPoste,\n  createJobApplication,\n  updateJobApplication,\n  deleteJobApplication\n};\nexport default jobApplicationsService;","map":{"version":3,"names":["axios","defaults","baseURL","interceptors","request","use","config","token","localStorage","getItem","headers","error","Promise","reject","getJobApplications","get","getJobApplicationById","id","getJobApplicationByIdPoste","getJobApplicationByIdPerson","createJobApplication","jobApplication","data","advertissement","advertisement_id","person","person_id","email_sent","status","post","updateJobApplication","put","deleteJobApplication","delete","jobApplicationsService"],"sources":["/home/marwan/Projet Groupe Web Piscine/T-WEB-501-LYO_19/project-jobboard/src/Services/jobApplicationService.js"],"sourcesContent":["import axios from 'axios';\n\naxios.defaults.baseURL = 'http://localhost:8080';\n\naxios.interceptors.request.use(\n  (config) => {\n    const token = localStorage.getItem('userToken');\n    if (token) {\n      config.headers['Authorization'] = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\n/**\n * Retrieves all job applications from the API.\n *\n * @return {Promise} A promise that resolves to the response data.\n */\nfunction getJobApplications() {\n  return axios.get('/api/job_applications');\n}\n\n/**\n * Retrieves a job application by its ID.\n *\n * @param {number} id - The ID of the job application.\n * @return {Promise} A promise that resolves to the job application data.\n */\nfunction getJobApplicationById(id) {\n  return axios.get(`/api/job_applications/${id}`);\n}\n\n/**\n * Retrieves a job application by its poste ID.\n *\n * @param {number} id - The ID of the poste.\n * @return {Promise} A promise that resolves to the job application object.\n */\nfunction getJobApplicationByIdPoste(id) {\n  return axios.get(`/api/job_applications/poste/${id}`);\n}\n\n/**\n * Retrieves a job application by the ID of the person.\n *\n * @param {number} id - The ID of the person.\n * @return {Promise} A promise that resolves to the job application data.\n */\nfunction getJobApplicationByIdPerson(id) {\n  return axios.get(`/api/job_applications/person/${id}`);\n}\n\n/**\n * Creates a job application.\n *\n * @param {object} jobApplication - The job application to be created.\n * @param {number} jobApplication.advertisement_id - The ID of the advertisement.\n * @param {number} jobApplication.person_id - The ID of the person.\n * @param {boolean} jobApplication.email_sent - Indicates if email was sent.\n * @param {string} jobApplication.status - The status of the application.\n * @return {Promise} A promise that resolves to the created job application.\n */\nfunction createJobApplication (jobApplication) {\n  const data = {\n    id: 0,\n    advertissement: {\n      id: jobApplication.advertisement_id\n    },\n    person: {\n      id: jobApplication.person_id\n    },\n    email_sent: jobApplication.email_sent,\n    status: jobApplication.status\n  }\n  return axios.post('/api/job_applications', data);\n}\n\n/**\n * Updates a job application.\n *\n * @param {object} jobApplication - The job application to be updated.\n * @param {number} jobApplication.advertisement_id - The ID of the advertisement.\n * @param {number} jobApplication.person_id - The ID of the person.\n * @param {boolean} jobApplication.email_sent - Indicates if email was sent.\n * @param {string} jobApplication.status - The status of the application.\n * @return {Promise} A promise that resolves to the updated job application.\n */\nfunction updateJobApplication (jobApplication) {\n  const data = {\n    id: jobApplication.id,\n    advertissement: {\n      id: jobApplication.advertisement_id\n    },\n    person: {\n      id: jobApplication.person_id\n    },\n    email_sent: jobApplication.email_sent,\n    status: jobApplication.status\n  }\n  return axios.put(`/api/job_applications/`, data);\n}\n\n/**\n * Deletes a job application with the given ID.\n *\n * @param {number} id - The ID of the job application to delete.\n * @return {Promise} A promise that resolves to the result of the deletion.\n */\nfunction deleteJobApplication(id) {\n  return axios.delete(`/api/job_applications/${id}`);\n}\n\nconst jobApplicationsService = {\n  getJobApplications,\n  getJobApplicationById,\n  getJobApplicationByIdPerson,\n  getJobApplicationByIdPoste,\n  createJobApplication,\n  updateJobApplication,\n  deleteJobApplication\n};\n\nexport default jobApplicationsService;\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzBA,KAAK,CAACC,QAAQ,CAACC,OAAO,GAAG,uBAAuB;AAEhDF,KAAK,CAACG,YAAY,CAACC,OAAO,CAACC,GAAG,CAC3BC,MAAM,IAAK;EACV,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC;EAC/C,IAAIF,KAAK,EAAE;IACTD,MAAM,CAACI,OAAO,CAAC,eAAe,CAAC,GAAI,UAASH,KAAM,EAAC;EACrD;EACA,OAAOD,MAAM;AACf,CAAC,EACAK,KAAK,IAAK;EACT,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,SAASG,kBAAkBA,CAAA,EAAG;EAC5B,OAAOd,KAAK,CAACe,GAAG,CAAC,uBAAuB,CAAC;AAC3C;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,qBAAqBA,CAACC,EAAE,EAAE;EACjC,OAAOjB,KAAK,CAACe,GAAG,CAAE,yBAAwBE,EAAG,EAAC,CAAC;AACjD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,0BAA0BA,CAACD,EAAE,EAAE;EACtC,OAAOjB,KAAK,CAACe,GAAG,CAAE,+BAA8BE,EAAG,EAAC,CAAC;AACvD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAASE,2BAA2BA,CAACF,EAAE,EAAE;EACvC,OAAOjB,KAAK,CAACe,GAAG,CAAE,gCAA+BE,EAAG,EAAC,CAAC;AACxD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASG,oBAAoBA,CAAEC,cAAc,EAAE;EAC7C,MAAMC,IAAI,GAAG;IACXL,EAAE,EAAE,CAAC;IACLM,cAAc,EAAE;MACdN,EAAE,EAAEI,cAAc,CAACG;IACrB,CAAC;IACDC,MAAM,EAAE;MACNR,EAAE,EAAEI,cAAc,CAACK;IACrB,CAAC;IACDC,UAAU,EAAEN,cAAc,CAACM,UAAU;IACrCC,MAAM,EAAEP,cAAc,CAACO;EACzB,CAAC;EACD,OAAO5B,KAAK,CAAC6B,IAAI,CAAC,uBAAuB,EAAEP,IAAI,CAAC;AAClD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASQ,oBAAoBA,CAAET,cAAc,EAAE;EAC7C,MAAMC,IAAI,GAAG;IACXL,EAAE,EAAEI,cAAc,CAACJ,EAAE;IACrBM,cAAc,EAAE;MACdN,EAAE,EAAEI,cAAc,CAACG;IACrB,CAAC;IACDC,MAAM,EAAE;MACNR,EAAE,EAAEI,cAAc,CAACK;IACrB,CAAC;IACDC,UAAU,EAAEN,cAAc,CAACM,UAAU;IACrCC,MAAM,EAAEP,cAAc,CAACO;EACzB,CAAC;EACD,OAAO5B,KAAK,CAAC+B,GAAG,CAAE,wBAAuB,EAAET,IAAI,CAAC;AAClD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAASU,oBAAoBA,CAACf,EAAE,EAAE;EAChC,OAAOjB,KAAK,CAACiC,MAAM,CAAE,yBAAwBhB,EAAG,EAAC,CAAC;AACpD;AAEA,MAAMiB,sBAAsB,GAAG;EAC7BpB,kBAAkB;EAClBE,qBAAqB;EACrBG,2BAA2B;EAC3BD,0BAA0B;EAC1BE,oBAAoB;EACpBU,oBAAoB;EACpBE;AACF,CAAC;AAED,eAAeE,sBAAsB"},"metadata":{},"sourceType":"module","externalDependencies":[]}