{"ast":null,"code":"var _jsxFileName = \"/home/marwan/Projet Groupe Web Piscine/T-WEB-501-LYO_19/project-jobboard/src/Pages/Account.js\",\n  _s = $RefreshSig$();\nimport { React, useState, useEffect, useRef } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport PeopleService from '../Services/PeopleService';\nimport CompaniesService from '../Services/CompaniesService';\nimport jwtDecode from 'jwt-decode';\nimport { useRole } from '../Components/RoleContext';\nimport { useAuth } from '../Components/AuthContext';\nimport alert from 'sweetalert2';\nimport '../Styles/Form.css';\nimport '../Styles/Account.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Account() {\n  _s();\n  const navigation = useNavigate();\n  const [isExisting, setIsExisting] = useState(false);\n  const [person, setPerson] = useState([]);\n  const [onePerson, setOnePerson] = useState([]);\n  const [companies, setCompanies] = useState([]);\n  const [verifyEmailClicked, setVerifyEmailClicked] = useState(false);\n  const [error, setError] = useState(null);\n  const token = localStorage.getItem(\"userToken\");\n  const {\n    setRole\n  } = useRole();\n  const inputMail = useRef();\n  const {\n    loginC,\n    logoutC\n  } = useAuth();\n  const [formData, setFormData] = useState({\n    id: 0,\n    name: '',\n    email: '',\n    password: '',\n    company_id: 0,\n    role: ''\n  });\n  const [formDataError, setFormDataError] = useState({\n    nameBool: true,\n    name: '',\n    emailBool: true,\n    email: '',\n    passwordBool: true,\n    password: '',\n    company_idBool: true,\n    company_id: '',\n    roleBool: true,\n    role: ''\n  });\n  const getAllPersons = async () => {\n    try {\n      const response = await PeopleService.getPeople();\n      setPerson(response.data);\n    } catch (err) {\n      setError(err);\n    }\n  };\n  const getPersonByEmail = async () => {\n    try {\n      const decodedToken = jwtDecode(token);\n      const email = decodedToken.sub;\n      const response = await PeopleService.getPersonByEmail(email);\n      setOnePerson(response.data);\n      setRole(response.data.role);\n    } catch (err) {\n      setError(err);\n    }\n  };\n  const fetchCompanies = async () => {\n    try {\n      const response = await CompaniesService.getCompanies();\n      setCompanies(response.data);\n    } catch (err) {\n      setError(err);\n    }\n  };\n  const login = async () => {\n    try {\n      const response = await PeopleService.login(formData.email, formData.password);\n      const token = response.data.token;\n      localStorage.setItem('userToken', token);\n      navigation('/');\n      loginC();\n    } catch (error) {\n      setError(error);\n    }\n  };\n  const createAccount = async () => {\n    try {\n      if (!isExisting) {\n        if (!formDataError.nameBool || !formDataError.emailBool || !formDataError.passwordBool || !formDataError.roleBool || !formDataError.company_idBool) {\n          const data = {\n            id: 0,\n            name: formData.name,\n            email: formData.email,\n            password: formData.password,\n            role: formData.role,\n            company: {\n              id: formData.company_id\n            }\n          };\n          const response = await PeopleService.createPerson(data);\n          setPerson([...person, response.data]);\n          setIsExisting(true);\n          login();\n          setFormData({\n            id: 0,\n            name: '',\n            email: '',\n            password: '',\n            company_id: 0\n          });\n        }\n      } else {\n        login();\n      }\n    } catch (err) {\n      setError(err);\n    }\n  };\n  const handleInputChange = event => {\n    const {\n      name,\n      value\n    } = event.target;\n    setFormData(prevState => ({\n      ...prevState,\n      [name]: value\n    }));\n    if (value.trim() === \"\" || value === \"0\") {\n      setFormDataError(prevError => ({\n        ...prevError,\n        [`${name}Bool`]: true,\n        [name]: `${name} cannot be empty`\n      }));\n    } else {\n      setFormDataError(prevError => ({\n        ...prevError,\n        [`${name}Bool`]: false,\n        [name]: ''\n      }));\n    }\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    await createAccount();\n  };\n  const verifyEmail = async e => {\n    e.target.disabled = true;\n    e.target.style.display = 'none';\n    setVerifyEmailClicked(true);\n    inputMail.current.disabled = true;\n    if (person.find(p => p.email === formData.email)) {\n      setIsExisting(true);\n    } else {\n      setIsExisting(false);\n    }\n  };\n  useEffect(() => {\n    getAllPersons();\n    fetchCompanies();\n    getPersonByEmail();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    class: \"account\",\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Account\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"form\", {\n        children: /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"Username\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 176,\n            columnNumber: 36\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 177,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        children: /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"Password\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 181,\n            columnNumber: 36\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 182,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 172,\n    columnNumber: 9\n  }, this);\n}\n_s(Account, \"riqYBydP7w0/hDbAct9CoIBAgfk=\", false, function () {\n  return [useNavigate, useRole, useAuth];\n});\n_c = Account;\nexport default Account;\nvar _c;\n$RefreshReg$(_c, \"Account\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useNavigate","PeopleService","CompaniesService","jwtDecode","useRole","useAuth","alert","jsxDEV","_jsxDEV","Account","_s","navigation","isExisting","setIsExisting","person","setPerson","onePerson","setOnePerson","companies","setCompanies","verifyEmailClicked","setVerifyEmailClicked","error","setError","token","localStorage","getItem","setRole","inputMail","loginC","logoutC","formData","setFormData","id","name","email","password","company_id","role","formDataError","setFormDataError","nameBool","emailBool","passwordBool","company_idBool","roleBool","getAllPersons","response","getPeople","data","err","getPersonByEmail","decodedToken","sub","fetchCompanies","getCompanies","login","setItem","createAccount","company","createPerson","handleInputChange","event","value","target","prevState","trim","prevError","handleSubmit","e","preventDefault","verifyEmail","disabled","style","display","current","find","p","class","children","fileName","_jsxFileName","lineNumber","columnNumber","type","_c","$RefreshReg$"],"sources":["/home/marwan/Projet Groupe Web Piscine/T-WEB-501-LYO_19/project-jobboard/src/Pages/Account.js"],"sourcesContent":["import { React, useState, useEffect, useRef } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport PeopleService from '../Services/PeopleService';\nimport CompaniesService from '../Services/CompaniesService';\nimport jwtDecode from 'jwt-decode';\nimport { useRole } from '../Components/RoleContext';\nimport { useAuth } from '../Components/AuthContext';\nimport alert from 'sweetalert2';\n\nimport '../Styles/Form.css';\nimport '../Styles/Account.css';\n\nfunction Account () {\n    const navigation = useNavigate();\n    const [isExisting, setIsExisting] = useState(false);\n    const [person, setPerson] = useState([]);\n    const [onePerson, setOnePerson] = useState([]);\n    const [companies, setCompanies] = useState([]);\n    const [verifyEmailClicked, setVerifyEmailClicked] = useState(false);\n    const [error, setError] = useState(null);\n    const token = localStorage.getItem(\"userToken\");\n    const { setRole } = useRole();\n    const inputMail = useRef();\n    \n    const {loginC, logoutC} = useAuth();\n\n    const [formData, setFormData] = useState({\n        id: 0,\n        name: '',\n        email: '',\n        password: '',\n        company_id: 0,\n        role: ''\n    })\n\n    const [formDataError, setFormDataError] = useState({\n        nameBool: true,\n        name: '',\n        emailBool: true,\n        email: '',\n        passwordBool: true,\n        password: '',\n        company_idBool: true,\n        company_id: '',\n        roleBool: true,\n        role: ''\n    })\n\n    const getAllPersons = async () => {\n        try {\n            const response = await PeopleService.getPeople();\n            setPerson(response.data);\n        } catch (err) {\n            setError(err);\n        }\n    }\n\n    const getPersonByEmail = async () => {\n        try {\n            const decodedToken = jwtDecode(token);\n            const email = decodedToken.sub;\n            const response = await PeopleService.getPersonByEmail(email);\n            setOnePerson(response.data);\n            setRole(response.data.role);\n        } catch (err) {\n            setError(err);\n        }\n    }\n\n    const fetchCompanies = async () => {\n        try {\n            const response = await CompaniesService.getCompanies();\n            setCompanies(response.data);\n        } catch (err) {\n            setError(err);\n        }\n    }\n\n    const login = async () => {\n        try {\n            const response = await PeopleService.login(formData.email, formData.password);\n            const token = response.data.token;\n            localStorage.setItem('userToken', token);\n            navigation('/');\n            loginC();\n            \n        } catch (error) {\n            setError(error);\n        }\n    }\n\n\n\n    const createAccount = async () => {\n        try {\n            if (!isExisting) {\n                if (!formDataError.nameBool || !formDataError.emailBool || !formDataError.passwordBool || !formDataError.roleBool || !formDataError.company_idBool) {\n                    const data = {\n                        id: 0,\n                        name: formData.name,\n                        email: formData.email,\n                        password: formData.password,\n                        role: formData.role,\n                        company: {\n                            id: formData.company_id\n                        }\n                    }\n                    const response = await PeopleService.createPerson(data);\n                    setPerson([...person, response.data]);\n                    setIsExisting(true);\n                    login();\n                    setFormData({\n                        id: 0,\n                        name: '',\n                        email: '',\n                        password: '',\n                        company_id: 0\n                    })\n                }\n            }\n            else {\n                login();\n            }\n        } catch (err) {\n            setError(err);\n        }\n    }\n\n    const handleInputChange = (event) => {\n        const { name, value } = event.target;\n        setFormData(prevState => ({ ...prevState, [name]: value }));\n        if (value.trim() === \"\" || value === \"0\") {\n            setFormDataError(prevError => ({\n                ...prevError,\n                [`${name}Bool`]: true,\n                [name]: `${name} cannot be empty`\n            }));\n        } else {\n            setFormDataError(prevError => ({\n                ...prevError,\n                [`${name}Bool`]: false,\n                [name]: ''\n            }));\n        }\n    }\n\n    const handleSubmit = async (e) => {\n        e.preventDefault();\n        await createAccount();\n    }\n\n    const verifyEmail = async (e) => {\n        e.target.disabled = true;\n        e.target.style.display = 'none';\n        setVerifyEmailClicked(true);\n        inputMail.current.disabled = true;\n        if (person.find((p) => p.email === formData.email)) {\n            setIsExisting(true);\n        }\n        else {\n            setIsExisting(false);\n        }\n    }\n\n    useEffect(() => {\n        getAllPersons();\n        fetchCompanies();\n        getPersonByEmail();\n    }, [])\n\n    return (\n        <div class=\"account\">\n            <p>Account</p>\n            <div>\n                <form>\n                    <label>Username<br></br>\n                        <input type=\"text\"></input>\n                    </label>\n                </form>\n                <form>\n                    <label>Password<br></br>\n                        <input type=\"text\"></input>\n                    </label>\n                </form>\n            </div>\n        </div>\n        \n    );\n}\n\nexport default Account;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}