{"ast":null,"code":"var _jsxFileName = \"/home/marwan/Projet Groupe Web Piscine/T-WEB-501-LYO_19/project-jobboard/src/Pages/Account.js\",\n  _s = $RefreshSig$();\nimport { React, useState, useEffect, useRef } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport PeopleService from '../Services/PeopleService';\nimport CompaniesService from '../Services/CompaniesService';\nimport jwtDecode from 'jwt-decode';\nimport { useAuth } from '../Components/AuthContext';\nimport alert from 'sweetalert2';\nimport '../Styles/Form.css';\nimport '../Styles/Account.css';\nimport Swal from 'sweetalert2';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Account() {\n  _s();\n  const navigation = useNavigate();\n  const [isExisting, setIsExisting] = useState(false);\n  const [person, setPerson] = useState([]);\n  const [companies, setCompanies] = useState([]);\n  const [verifyEmailClicked, setVerifyEmailClicked] = useState(false);\n  const [isResetPassword, setIsResetPassword] = useState(false);\n  const [showformUpdate, setShowformUpdate] = useState(false);\n  const [showFormChangePassword, setShowFormChangePassword] = useState(false);\n  const [error, setError] = useState(null);\n  const token = localStorage.getItem(\"userToken\");\n  const inputMail = useRef();\n\n  // Auth context\n  const {\n    loginC,\n    logoutC\n  } = useAuth();\n\n  // Get user data from local storage\n  const user = JSON.parse(localStorage.getItem('user'));\n\n  // Form data state\n  const [formData, setFormData] = useState({\n    id: 0,\n    name: '',\n    email: '',\n    password: '',\n    company_id: 0,\n    role: '',\n    currentPassword: '',\n    newPassword: '',\n    confirmPassword: ''\n  });\n\n  // Form data error state\n  const [formDataError, setFormDataError] = useState({\n    nameBool: true,\n    name: '',\n    emailBool: true,\n    email: '',\n    passwordBool: true,\n    password: '',\n    company_idBool: true,\n    company_id: '',\n    roleBool: true,\n    role: '',\n    currentPasswordBool: true,\n    currentPassword: '',\n    newPasswordBool: true,\n    newPassword: '',\n    confirmPasswordBool: true,\n    confirmPassword: ''\n  });\n\n  /**\n   * Retrieves all persons from the PeopleService API and sets the person state with the response data.\n   *\n   * @return {Promise<void>} - A Promise that resolves once the operation is complete.\n   */\n  const getAllPersons = async () => {\n    try {\n      const response = await PeopleService.getPeople();\n      setPerson(response.data);\n    } catch (err) {\n      setError(err);\n    }\n  };\n\n  /**\n   * Fetches companies from the CompaniesService and updates the state with the response.\n   *\n   * @return {Promise<void>} - A promise that resolves when the fetch is complete.\n   */\n  const fetchCompanies = async () => {\n    try {\n      const response = await CompaniesService.getCompanies();\n      setCompanies(response.data);\n    } catch (err) {\n      setError(err);\n    }\n  };\n\n  /**\n   * Resets the password for a user.\n   *\n   * @return {Promise<void>} - A Promise that resolves when the password is reset successfully.\n   */\n  const resetPassword = async () => {\n    try {\n      await PeopleService.resetPassword(formData.email, formData.password);\n      Swal.fire({\n        icon: 'success',\n        title: 'Password changed successfully',\n        showConfirmButton: false,\n        timer: 1500\n      });\n      setIsResetPassword(false);\n      setIsExisting(false);\n      setFormData({\n        id: 0,\n        name: '',\n        email: '',\n        password: '',\n        company_id: 0,\n        role: ''\n      });\n    } catch (err) {\n      setError(err);\n    }\n  };\n\n  /**\n   * Resets the password for a logged-in user.\n   *\n   * @return {Promise<void>} - A Promise that resolves when the password is reset successfully.\n   */\n  const resetPasswordLoggedIn = async () => {\n    try {\n      const verifyPassword = await PeopleService.verifyPassword(user.email, formData.currentPassword);\n      if (!verifyPassword) {\n        setFormDataError(prevError => ({\n          ...prevError,\n          currentPasswordBool: true,\n          currentPassword: 'Wrong password'\n        }));\n        return;\n      }\n      if (formData.newPassword !== formData.confirmPassword) {\n        setFormDataError(prevError => ({\n          ...prevError,\n          confirmPasswordBool: true,\n          confirmPassword: 'Passwords do not match'\n        }));\n      } else {\n        await PeopleService.resetPassword(user.email, formData.password);\n        Swal.fire({\n          icon: 'success',\n          title: 'Password changed successfully',\n          showConfirmButton: false,\n          timer: 1500\n        });\n        setIsResetPassword(false);\n        setIsExisting(false);\n        setFormData({\n          id: 0,\n          name: '',\n          email: '',\n          password: '',\n          company_id: 0,\n          role: '',\n          currentPassword: '',\n          newPassword: '',\n          confirmPassword: ''\n        });\n      }\n    } catch (err) {\n      setError(err);\n    }\n  };\n\n  /**\n   * Logs in the user by sending a login request to the PeopleService API. \n   * If successful, stores the user token and user data in the local storage.\n   * Finally, navigates to the home page and calls the loginC function.\n   *\n   * @param {type} paramName - description of parameter\n   * @return {type} description of return value\n   */\n  const login = async () => {\n    try {\n      const response = await PeopleService.login(formData.email, formData.password);\n      const token = response.data.token;\n      localStorage.setItem('userToken', token);\n      const email = jwtDecode(token).sub;\n      const userResponse = await PeopleService.getPersonByEmail(email);\n      localStorage.setItem('user', JSON.stringify(userResponse.data));\n      navigation('/');\n      loginC();\n    } catch (error) {\n      setError(error);\n    }\n  };\n\n  /**\n   * Updates a person.\n   *\n   * @param {Object} person - The person object to be updated.\n   * @return {Promise} A promise that resolves with the updated user data.\n   */\n  const updatePerson = async person => {\n    try {\n      if (isExisting) {\n        const data = {\n          id: formData.id,\n          name: formData.name,\n          email: formData.email,\n          password: formData.password,\n          role: formData.role,\n          company: {\n            id: formData.company_id\n          }\n        };\n        const response = await PeopleService.updatePerson(data);\n        user = response.data;\n        localStorage.setItem('user', JSON.stringify(user));\n      }\n    } catch (err) {\n      setError(err);\n    }\n  };\n\n  /**\n   * Creates an account asynchronously.\n   *\n   * @return {void}\n   */\n  const createAccount = async () => {\n    try {\n      if (isResetPassword) {\n        await resetPassword();\n      }\n      if (!isExisting) {\n        if (!formDataError.nameBool || !formDataError.emailBool || !formDataError.passwordBool || !formDataError.roleBool || !formDataError.company_idBool) {\n          const data = {\n            id: 0,\n            name: formData.name,\n            email: formData.email,\n            password: formData.password,\n            role: formData.role,\n            company: {\n              id: formData.company_id\n            }\n          };\n          const response = await PeopleService.createPerson(data);\n          setPerson([...person, response.data]);\n          setIsExisting(true);\n          login();\n          setFormData({\n            id: 0,\n            name: '',\n            email: '',\n            password: '',\n            company_id: 0\n          });\n        }\n      } else {\n        login();\n      }\n    } catch (err) {\n      setError(err);\n    }\n  };\n\n  /**\n   * Verifies the password for the user.\n   *\n   * @param {string} email - The email of the user.\n   * @param {string} currentPassword - The current password to be verified.\n   * @return {Promise<boolean>} - A promise that resolves to true if the password is verified, false otherwise.\n   */\n  const verifyPassword = async () => {\n    try {\n      const response = await PeopleService.verifyPassword(user.email, formData.currentPassword);\n      return response;\n    } catch (err) {\n      setError(err);\n      return false;\n    }\n  };\n\n  /**\n   * Handles the input change event.\n   *\n   * @param {Event} event - The input change event.\n   * @return {Promise<void>} - A promise that resolves when the input change is handled.\n   */\n  const handleInputChange = async event => {\n    const {\n      name,\n      value\n    } = event.target;\n    setFormData(prevFormData => ({\n      ...prevFormData,\n      [name]: value\n    }));\n    if (value.trim() === \"\" || value === \"0\") {\n      setFormDataError(prevError => ({\n        ...prevError,\n        [`${name}Bool`]: true,\n        [name]: `${name} cannot be empty`\n      }));\n    } else if (person.find(p => p.email === value)) {\n      setFormDataError(prevError => ({\n        ...prevError,\n        [`${name}Bool`]: true,\n        [name]: `${name} already exists`\n      }));\n    } else {\n      setFormDataError(prevError => ({\n        ...prevError,\n        [`${name}Bool`]: false,\n        [name]: ''\n      }));\n    }\n  };\n\n  /**\n   * Handles the form submission.\n   *\n   * @param {Event} e - The form submission event.\n   * @return {Promise} A promise that resolves when the account is created.\n   */\n  const handleSubmit = async e => {\n    e.preventDefault();\n    await createAccount();\n  };\n\n  /**\n   * Sets the showFormUpdate state to true and updates the formData and formDataError states.\n   *\n   * @param {Object} data - The data object containing the values to be updated.\n   */\n  const showUpdateForm = data => {\n    setShowformUpdate(true);\n    setFormData({\n      id: data.id,\n      name: data.name,\n      email: data.email,\n      password: data.password,\n      role: data.role,\n      company_id: data.company.id\n    });\n    setFormDataError({\n      nameBool: false,\n      emailBool: false,\n      passwordBool: false,\n      roleBool: false,\n      company_idBool: false,\n      name: '',\n      email: '',\n      password: '',\n      role: '',\n      company_id: 0\n    });\n  };\n\n  /**\n   * Verify an email address using the PeopleService API.\n   *\n   * @param {Event} e - The event object.\n   * @return {Promise<void>} Promise that resolves to nothing.\n   */\n  const verifyEmail = async e => {\n    e.target.disabled = true;\n    e.target.style.display = 'none';\n    setVerifyEmailClicked(true);\n    inputMail.current.disabled = true;\n    if (person.find(p => p.email === formData.email)) {\n      setIsExisting(true);\n    } else {\n      setIsExisting(false);\n    }\n  };\n  useEffect(() => {\n    getAllPersons();\n    fetchCompanies();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: !token ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-account\",\n        children: /*#__PURE__*/_jsxDEV(\"form\", {\n          className: \"form\",\n          onSubmit: handleSubmit,\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"email\",\n            children: \"Email\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 393,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            ref: inputMail,\n            type: \"email\",\n            name: \"email\",\n            value: formData.email,\n            onChange: handleInputChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 394,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"error-account\",\n            children: formDataError.emailBool ? formDataError.email : ''\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 395,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn\",\n            onClick: verifyEmail,\n            children: \"Login/Register\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 396,\n            columnNumber: 29\n          }, this), verifyEmailClicked && /*#__PURE__*/_jsxDEV(\"div\", {\n            children: !isExisting && !isResetPassword ? /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                htmlFor: \"name\",\n                children: \"Name: \"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 401,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"text\",\n                name: \"name\",\n                value: formData.name,\n                onChange: handleInputChange\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 402,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 403,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"error-account\",\n                children: formDataError.nameBool ? formDataError.name : ''\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 404,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 405,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                htmlFor: \"password\",\n                children: \"Password: \"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 406,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"password\",\n                name: \"password\",\n                value: formData.password,\n                onChange: handleInputChange\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 407,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 408,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"error-account\",\n                children: formDataError.passwordBool ? formDataError.password : ''\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 409,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 410,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                htmlFor: \"company_id\",\n                children: \"Company: \"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 411,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n                name: \"company_id\",\n                id: \"company_id\",\n                value: formData.company_id,\n                onChange: handleInputChange,\n                children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"0\",\n                  children: \"Select Company\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 417,\n                  columnNumber: 49\n                }, this), companies && companies.map(c => /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: c.id,\n                  children: c.name\n                }, c.id, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 419,\n                  columnNumber: 53\n                }, this))]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 412,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 422,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"error-account\",\n                children: formDataError.company_idBool ? formDataError.company_id : ''\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 423,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 424,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                htmlFor: \"role\",\n                children: \"Role: \"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 425,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n                name: \"role\",\n                id: \"role\",\n                value: formData.role,\n                onChange: handleInputChange,\n                children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"0\",\n                  children: \"Select Role\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 428,\n                  columnNumber: 49\n                }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"admin\",\n                  children: \"Admin\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 429,\n                  columnNumber: 49\n                }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"manager\",\n                  children: \"Manager\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 430,\n                  columnNumber: 49\n                }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"employee\",\n                  children: \"Employee\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 431,\n                  columnNumber: 49\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 426,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 433,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"error-account\",\n                children: formDataError.roleBool ? formDataError.role : ''\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 434,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 435,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"btn\",\n                type: \"submit\",\n                children: \"Create\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 436,\n                columnNumber: 45\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 400,\n              columnNumber: 41\n            }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [!isResetPassword && /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                  htmlFor: \"password\",\n                  children: \"Password\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 440,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"password\",\n                  name: \"password\",\n                  value: formData.password,\n                  onChange: handleInputChange\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 441,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 442,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"error\",\n                  children: error && error.message == \"Error message with a status code 401\" ? \"Wrong password\" : ''\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 443,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 444,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"btn\",\n                  type: \"submit\",\n                  children: \"Login\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 445,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"btn\",\n                  type: \"button\",\n                  onClick: () => {\n                    setIsResetPassword(true);\n                    setIsExisting(false);\n                  },\n                  children: \"Reset Password\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 446,\n                  columnNumber: 45\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 439,\n                columnNumber: 62\n              }, this), isResetPassword && /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                  htmlFor: \"password\",\n                  children: \"Reset Password: \"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 449,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"password\",\n                  name: \"password\",\n                  value: formData.password,\n                  onChange: handleInputChange\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 450,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 451,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"btn\",\n                  type: \"submit\",\n                  children: \"Reset Password\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 452,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 453,\n                  columnNumber: 45\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 448,\n                columnNumber: 61\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 438,\n              columnNumber: 41\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 398,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 392,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 391,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"account-container\",\n          children: [user && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"card\",\n            children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n              className: \"card-title\",\n              children: \"Data for User\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 466,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"card-content\",\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\"Name: \", user.name]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 468,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\"Email: \", user.email]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 469,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\"Role: \", user.role]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 470,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [\"Company: \", user.company.name]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 471,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 467,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"card-footer\",\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"btn\",\n                onClick: () => showUpdateForm(user),\n                children: \"Update\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 474,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"btn\",\n                onClick: () => setShowFormChangePassword(true),\n                children: \"Change Password\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 475,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 473,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 465,\n            columnNumber: 33\n          }, this), showformUpdate && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"container-form\",\n            children: /*#__PURE__*/_jsxDEV(\"form\", {\n              className: \"form\",\n              onSubmit: updatePerson,\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"hidden\",\n                name: \"id\",\n                value: user.id\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 482,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                htmlFor: \"name\",\n                children: \"Name: \"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 483,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"text\",\n                name: \"name\",\n                value: formData.name,\n                onChange: handleInputChange\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 484,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 485,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"error-account\",\n                children: formDataError.nameBool ? formDataError.name : ''\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 486,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                htmlFor: \"email\",\n                children: \"Email: \"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 487,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"email\",\n                name: \"email\",\n                value: formData.email,\n                onChange: handleInputChange\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 488,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 489,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"error-account\",\n                children: formDataError.emailBool ? formDataError.email : ''\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 490,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 491,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                htmlFor: \"company_id\",\n                children: \"Company: \"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 492,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n                name: \"company_id\",\n                id: \"company_id\",\n                value: formData.company_id,\n                onChange: handleInputChange,\n                children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"0\",\n                  children: \"Select Company\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 498,\n                  columnNumber: 45\n                }, this), companies && companies.map(c => /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: c.id,\n                  children: c.name\n                }, c.id, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 500,\n                  columnNumber: 49\n                }, this))]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 493,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 503,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"error-account\",\n                children: formDataError.company_idBool ? formDataError.company_id : ''\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 504,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 505,\n                columnNumber: 41\n              }, this), !formDataError.nameBool && !formDataError.emailBool && !formDataError.company_idBool && !formDataError.passwordBool && !formDataError.roleBool && /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"btn\",\n                type: \"submit\",\n                children: \"Update\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 507,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 509,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"btn\",\n                onClick: () => setShowformUpdate(false),\n                children: \"Close Form\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 510,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 481,\n              columnNumber: 37\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 480,\n            columnNumber: 33\n          }, this), showFormChangePassword && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"container-form\",\n            children: /*#__PURE__*/_jsxDEV(\"form\", {\n              className: \"form\",\n              onSubmit: resetPasswordLoggedIn,\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                htmlFor: \"currentPassword\",\n                children: \"Current Password: \"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 518,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"password\",\n                name: \"currentPassword\",\n                value: formData.currentPassword,\n                onChange: handleInputChange\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 519,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 520,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"error-account\",\n                children: formDataError.currentPasswordBool ? formDataError.currentPassword : ''\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 521,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 522,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                  htmlFor: \"newPassword\",\n                  children: \"New Password: \"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 524,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"password\",\n                  name: \"newPassword\",\n                  value: formData.newPassword,\n                  onChange: handleInputChange\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 525,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 526,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"error-account\",\n                  children: formDataError.newPasswordBool ? formDataError.newPassword : ''\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 527,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 528,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                  htmlFor: \"confirmPassword\",\n                  children: \"Confirm Password: \"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 529,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"password\",\n                  name: \"confirmPassword\",\n                  value: formData.confirmPassword,\n                  onChange: handleInputChange\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 530,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 531,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"error-account\",\n                  children: formDataError.confirmPasswordBool ? formDataError.confirmPassword : ''\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 532,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 533,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"btn\",\n                  type: \"submit\",\n                  children: \"Change Password\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 534,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 535,\n                  columnNumber: 45\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 523,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"btn\",\n                onClick: () => setShowFormChangePassword(false),\n                children: \"Close Form\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 537,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 517,\n              columnNumber: 37\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 515,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 463,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 462,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 389,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 388,\n    columnNumber: 9\n  }, this);\n}\n_s(Account, \"QMRQ8MF7htwj7IblH2NFIBLYbZY=\", false, function () {\n  return [useNavigate, useAuth];\n});\n_c = Account;\nexport default Account;\nvar _c;\n$RefreshReg$(_c, \"Account\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useNavigate","PeopleService","CompaniesService","jwtDecode","useAuth","alert","Swal","jsxDEV","_jsxDEV","Account","_s","navigation","isExisting","setIsExisting","person","setPerson","companies","setCompanies","verifyEmailClicked","setVerifyEmailClicked","isResetPassword","setIsResetPassword","showformUpdate","setShowformUpdate","showFormChangePassword","setShowFormChangePassword","error","setError","token","localStorage","getItem","inputMail","loginC","logoutC","user","JSON","parse","formData","setFormData","id","name","email","password","company_id","role","currentPassword","newPassword","confirmPassword","formDataError","setFormDataError","nameBool","emailBool","passwordBool","company_idBool","roleBool","currentPasswordBool","newPasswordBool","confirmPasswordBool","getAllPersons","response","getPeople","data","err","fetchCompanies","getCompanies","resetPassword","fire","icon","title","showConfirmButton","timer","resetPasswordLoggedIn","verifyPassword","prevError","login","setItem","sub","userResponse","getPersonByEmail","stringify","updatePerson","company","createAccount","createPerson","handleInputChange","event","value","target","prevFormData","trim","find","p","handleSubmit","e","preventDefault","showUpdateForm","verifyEmail","disabled","style","display","current","children","className","onSubmit","htmlFor","fileName","_jsxFileName","lineNumber","columnNumber","ref","type","onChange","onClick","map","c","message","_c","$RefreshReg$"],"sources":["/home/marwan/Projet Groupe Web Piscine/T-WEB-501-LYO_19/project-jobboard/src/Pages/Account.js"],"sourcesContent":["import { React, useState, useEffect, useRef } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport PeopleService from '../Services/PeopleService';\nimport CompaniesService from '../Services/CompaniesService';\nimport jwtDecode from 'jwt-decode';\nimport { useAuth } from '../Components/AuthContext';\nimport alert from 'sweetalert2';\n\nimport '../Styles/Form.css';\nimport '../Styles/Account.css';\nimport Swal from 'sweetalert2';\n\nfunction Account () {\n    const navigation = useNavigate();\n    const [isExisting, setIsExisting] = useState(false);\n    const [person, setPerson] = useState([]);\n    const [companies, setCompanies] = useState([]);\n    const [verifyEmailClicked, setVerifyEmailClicked] = useState(false);\n    const [isResetPassword, setIsResetPassword] = useState(false);\n    const [showformUpdate, setShowformUpdate] = useState(false);\n    const [showFormChangePassword, setShowFormChangePassword] = useState(false);\n    const [error, setError] = useState(null);\n    const token = localStorage.getItem(\"userToken\");\n    const inputMail = useRef();\n\n\n    // Auth context\n    const { loginC, logoutC } = useAuth();\n\n    // Get user data from local storage\n    const user = JSON.parse(localStorage.getItem('user'));\n\n    // Form data state\n    const [formData, setFormData] = useState({\n        id: 0,\n        name: '',\n        email: '',\n        password: '',\n        company_id: 0,\n        role: '',\n        currentPassword: '',\n        newPassword: '',\n        confirmPassword: ''\n    })\n\n    // Form data error state\n    const [formDataError, setFormDataError] = useState({\n        nameBool: true,\n        name: '',\n        emailBool: true,\n        email: '',\n        passwordBool: true,\n        password: '',\n        company_idBool: true,\n        company_id: '',\n        roleBool: true,\n        role: '',\n        currentPasswordBool: true,\n        currentPassword: '',\n        newPasswordBool: true,\n        newPassword: '',\n        confirmPasswordBool: true,\n        confirmPassword: ''\n    })\n\n    /**\n     * Retrieves all persons from the PeopleService API and sets the person state with the response data.\n     *\n     * @return {Promise<void>} - A Promise that resolves once the operation is complete.\n     */\n    const getAllPersons = async () => {\n        try {\n            const response = await PeopleService.getPeople();\n            setPerson(response.data);\n        } catch (err) {\n            setError(err);\n        }\n    }\n\n    /**\n     * Fetches companies from the CompaniesService and updates the state with the response.\n     *\n     * @return {Promise<void>} - A promise that resolves when the fetch is complete.\n     */\n    const fetchCompanies = async () => {\n        try {\n            const response = await CompaniesService.getCompanies();\n            setCompanies(response.data);\n        } catch (err) {\n            setError(err);\n        }\n    }\n\n    /**\n     * Resets the password for a user.\n     *\n     * @return {Promise<void>} - A Promise that resolves when the password is reset successfully.\n     */\n    const resetPassword = async () => {\n        try {\n            await PeopleService.resetPassword(formData.email, formData.password);\n            Swal.fire({\n                icon: 'success',\n                title: 'Password changed successfully',\n                showConfirmButton: false,\n                timer: 1500\n            })\n            setIsResetPassword(false);\n            setIsExisting(false);\n            setFormData({\n                id: 0,\n                name: '',\n                email: '',\n                password: '',\n                company_id: 0,\n                role: ''\n            })\n        } catch (err) {\n            setError(err);\n        }\n    }\n\n    /**\n     * Resets the password for a logged-in user.\n     *\n     * @return {Promise<void>} - A Promise that resolves when the password is reset successfully.\n     */\n    const resetPasswordLoggedIn = async () => {\n        try {\n            const verifyPassword = await PeopleService.verifyPassword(user.email, formData.currentPassword);\n            if (!verifyPassword) {\n                setFormDataError(prevError => ({\n                    ...prevError,\n                    currentPasswordBool: true,\n                    currentPassword: 'Wrong password'\n                }))\n                return;\n            }\n            if (formData.newPassword !== formData.confirmPassword) {\n                setFormDataError(prevError => ({\n                    ...prevError,\n                    confirmPasswordBool: true,\n                    confirmPassword: 'Passwords do not match'\n                }));\n            }\n            else {\n                await PeopleService.resetPassword(user.email, formData.password);\n                Swal.fire({\n                    icon: 'success',\n                    title: 'Password changed successfully',\n                    showConfirmButton: false,\n                    timer: 1500\n                })\n                setIsResetPassword(false);\n                setIsExisting(false);\n                setFormData({\n                    id: 0,\n                    name: '',\n                    email: '',\n                    password: '',\n                    company_id: 0,\n                    role: '',\n                    currentPassword: '',\n                    newPassword: '',\n                    confirmPassword: ''\n                })\n            }\n        } catch (err) {\n            setError(err);\n        }\n    }\n\n    /**\n     * Logs in the user by sending a login request to the PeopleService API. \n     * If successful, stores the user token and user data in the local storage.\n     * Finally, navigates to the home page and calls the loginC function.\n     *\n     * @param {type} paramName - description of parameter\n     * @return {type} description of return value\n     */\n    const login = async () => {\n        try {\n            const response = await PeopleService.login(formData.email, formData.password);\n            const token = response.data.token;\n            localStorage.setItem('userToken', token);\n\n            const email = jwtDecode(token).sub;\n            const userResponse = await PeopleService.getPersonByEmail(email);\n\n            localStorage.setItem('user', JSON.stringify(userResponse.data));\n\n            navigation('/');\n            loginC();\n\n        } catch (error) {\n            setError(error);\n        }\n    }\n\n    /**\n     * Updates a person.\n     *\n     * @param {Object} person - The person object to be updated.\n     * @return {Promise} A promise that resolves with the updated user data.\n     */\n    const updatePerson = async (person) => {\n        try {\n            if (isExisting) {\n                const data = {\n                    id: formData.id,\n                    name: formData.name,\n                    email: formData.email,\n                    password: formData.password,\n                    role: formData.role,\n                    company: {\n                        id: formData.company_id\n                    }\n                }\n                const response = await PeopleService.updatePerson(data);\n                user = response.data;\n                localStorage.setItem('user', JSON.stringify(user));\n            }\n        } catch (err) {\n            setError(err);\n        }\n    }\n\n    /**\n     * Creates an account asynchronously.\n     *\n     * @return {void}\n     */\n    const createAccount = async () => {\n        try {\n            if (isResetPassword) {\n                await resetPassword();\n            }\n            if (!isExisting) {\n                if (!formDataError.nameBool || !formDataError.emailBool || !formDataError.passwordBool || !formDataError.roleBool || !formDataError.company_idBool) {\n                    const data = {\n                        id: 0,\n                        name: formData.name,\n                        email: formData.email,\n                        password: formData.password,\n                        role: formData.role,\n                        company: {\n                            id: formData.company_id\n                        }\n                    }\n                    const response = await PeopleService.createPerson(data);\n                    setPerson([...person, response.data]);\n                    setIsExisting(true);\n                    login();\n                    setFormData({\n                        id: 0,\n                        name: '',\n                        email: '',\n                        password: '',\n                        company_id: 0\n                    })\n                }\n            }\n            else {\n                login();\n            }\n        } catch (err) {\n            setError(err);\n        }\n    }\n\n    /**\n     * Verifies the password for the user.\n     *\n     * @param {string} email - The email of the user.\n     * @param {string} currentPassword - The current password to be verified.\n     * @return {Promise<boolean>} - A promise that resolves to true if the password is verified, false otherwise.\n     */\n    const verifyPassword = async () => {\n        try {\n            const response = await PeopleService.verifyPassword(user.email, formData.currentPassword);\n            return response;\n        } catch (err) {\n            setError(err);\n            return false;\n        }\n    }\n\n    /**\n     * Handles the input change event.\n     *\n     * @param {Event} event - The input change event.\n     * @return {Promise<void>} - A promise that resolves when the input change is handled.\n     */\n    const handleInputChange = async (event) => {\n        const { name, value } = event.target;\n\n        setFormData(prevFormData => ({\n            ...prevFormData,\n            [name]: value\n        }));\n\n        if (value.trim() === \"\" || value === \"0\") {\n            setFormDataError(prevError => ({\n                ...prevError,\n                [`${name}Bool`]: true,\n                [name]: `${name} cannot be empty`\n            }));\n        } else if (person.find((p) => p.email === value)) {\n            setFormDataError(prevError => ({\n                ...prevError,\n                [`${name}Bool`]: true,\n                [name]: `${name} already exists`\n            }));\n        } else {\n            setFormDataError(prevError => ({\n                ...prevError,\n                [`${name}Bool`]: false,\n                [name]: ''\n            }));\n        }\n    }\n\n    /**\n     * Handles the form submission.\n     *\n     * @param {Event} e - The form submission event.\n     * @return {Promise} A promise that resolves when the account is created.\n     */\n    const handleSubmit = async (e) => {\n        e.preventDefault();\n        await createAccount();\n    }\n\n    /**\n     * Sets the showFormUpdate state to true and updates the formData and formDataError states.\n     *\n     * @param {Object} data - The data object containing the values to be updated.\n     */\n    const showUpdateForm = (data) => {\n        setShowformUpdate(true);\n        setFormData({\n            id: data.id,\n            name: data.name,\n            email: data.email,\n            password: data.password,\n            role: data.role,\n            company_id: data.company.id\n        });\n        setFormDataError({\n            nameBool: false,\n            emailBool: false,\n            passwordBool: false,\n            roleBool: false,\n            company_idBool: false,\n            name: '',\n            email: '',\n            password: '',\n            role: '',\n            company_id: 0\n        })\n    }\n\n    /**\n     * Verify an email address using the PeopleService API.\n     *\n     * @param {Event} e - The event object.\n     * @return {Promise<void>} Promise that resolves to nothing.\n     */\n    const verifyEmail = async (e) => {\n        e.target.disabled = true;\n        e.target.style.display = 'none';\n        setVerifyEmailClicked(true);\n        inputMail.current.disabled = true;\n        if (person.find((p) => p.email === formData.email)) {\n            setIsExisting(true);\n        }\n        else {\n            setIsExisting(false);\n        }\n    }\n\n    useEffect(() => {\n        getAllPersons();\n        fetchCompanies();\n    }, [])\n\n    return (\n        <div>\n            <div>\n                {!token ? (\n                    <div className='form-account'>\n                        <form className='form' onSubmit={handleSubmit}>\n                            <label htmlFor='email'>Email</label>\n                            <input ref={inputMail} type='email' name='email' value={formData.email} onChange={handleInputChange} />\n                            <span className='error-account'>{formDataError.emailBool ? formDataError.email : ''}</span>\n                            <button className='btn' onClick={verifyEmail}>Login/Register</button>\n                            {verifyEmailClicked && (\n                                <div>\n                                    {!isExisting && !isResetPassword ? (\n                                        <div>\n                                            <label htmlFor='name'>Name: </label>\n                                            <input type='text' name='name' value={formData.name} onChange={handleInputChange} />\n                                            <br />\n                                            <span className='error-account'>{formDataError.nameBool ? formDataError.name : ''}</span>\n                                            <br />\n                                            <label htmlFor='password'>Password: </label>\n                                            <input type='password' name='password' value={formData.password} onChange={handleInputChange} />\n                                            <br />\n                                            <span className='error-account'>{formDataError.passwordBool ? formDataError.password : ''}</span>\n                                            <br />\n                                            <label htmlFor='company_id'>Company: </label>\n                                            <select\n                                                name='company_id'\n                                                id='company_id'\n                                                value={formData.company_id}\n                                                onChange={handleInputChange}>\n                                                <option value=\"0\">Select Company</option>\n                                                {companies && companies.map((c) => (\n                                                    <option key={c.id} value={c.id}>{c.name}</option>\n                                                ))}\n                                            </select>\n                                            <br />\n                                            <span className='error-account'>{formDataError.company_idBool ? formDataError.company_id : ''}</span>\n                                            <br />\n                                            <label htmlFor='role'>Role: </label>\n                                            <select name='role' id='role'\n                                                value={formData.role} onChange={handleInputChange}>\n                                                <option value=\"0\">Select Role</option>\n                                                <option value=\"admin\">Admin</option>\n                                                <option value=\"manager\">Manager</option>\n                                                <option value=\"employee\">Employee</option>\n                                            </select>\n                                            <br />\n                                            <span className='error-account'>{formDataError.roleBool ? formDataError.role : ''}</span>\n                                            <br />\n                                            <button className='btn' type='submit'>Create</button>\n                                        </div>\n                                    ) : <div>\n                                        {!isResetPassword && <div>\n                                            <label htmlFor='password'>Password</label>\n                                            <input type='password' name='password' value={formData.password} onChange={handleInputChange} />\n                                            <br />\n                                            <span className='error'>{error && error.message == \"Error message with a status code 401\" ? \"Wrong password\" : ''}</span>\n                                            <br />\n                                            <button className='btn' type='submit'>Login</button>\n                                            <button className='btn' type='button' onClick={() => { setIsResetPassword(true); setIsExisting(false); }}>Reset Password</button>\n                                        </div>}\n                                        {isResetPassword && <div>\n                                            <label htmlFor='password'>Reset Password: </label>\n                                            <input type='password' name='password' value={formData.password} onChange={handleInputChange} />\n                                            <br />\n                                            <button className='btn' type='submit'>Reset Password</button>\n                                            <br />\n                                        </div>\n                                        }\n                                    </div>}\n                                </div>\n                            )}\n                        </form>\n                    </div>\n                ) : (\n                    <div>\n                        <div className='account-container'>\n                            {user && (\n                                <div className='card'>\n                                    <h2 className='card-title'>Data for User</h2>\n                                    <div className='card-content'>\n                                        <p>Name: {user.name}</p>\n                                        <p>Email: {user.email}</p>\n                                        <p>Role: {user.role}</p>\n                                        <p>Company: {user.company.name}</p>\n                                    </div>\n                                    <div className='card-footer'>\n                                        <button className='btn' onClick={() => showUpdateForm(user)}>Update</button>\n                                        <button className='btn' onClick={() => setShowFormChangePassword(true)}>Change Password</button>\n                                    </div>\n                                </div>\n                            )}\n                            {showformUpdate && (\n                                <div className='container-form'>\n                                    <form className='form' onSubmit={updatePerson}>\n                                        <input type='hidden' name='id' value={user.id} />\n                                        <label htmlFor='name'>Name: </label>\n                                        <input type='text' name='name' value={formData.name} onChange={handleInputChange} />\n                                        <br />\n                                        <span className='error-account'>{formDataError.nameBool ? formDataError.name : ''}</span>\n                                        <label htmlFor='email'>Email: </label>\n                                        <input type='email' name='email' value={formData.email} onChange={handleInputChange} />\n                                        <br />\n                                        <span className='error-account'>{formDataError.emailBool ? formDataError.email : ''}</span>\n                                        <br />\n                                        <label htmlFor='company_id'>Company: </label>\n                                        <select\n                                            name='company_id'\n                                            id='company_id'\n                                            value={formData.company_id}\n                                            onChange={handleInputChange}>\n                                            <option value=\"0\">Select Company</option>\n                                            {companies && companies.map((c) => (\n                                                <option key={c.id} value={c.id}>{c.name}</option>\n                                            ))}\n                                        </select>\n                                        <br />\n                                        <span className='error-account'>{formDataError.company_idBool ? formDataError.company_id : ''}</span>\n                                        <br />\n                                        {!formDataError.nameBool && !formDataError.emailBool && !formDataError.company_idBool && !formDataError.passwordBool && !formDataError.roleBool &&\n                                            <button className='btn' type='submit'>Update</button>\n                                        }\n                                        <br />\n                                        <button className='btn' onClick={() => setShowformUpdate(false)}>Close Form</button>\n                                    </form>\n                                </div>\n                            )}\n                            {showFormChangePassword && (\n                                <div className='container-form'>\n                                    {/*Form contains currentPassword and verifyPassword/ newPassword and confirmPassword.*/}\n                                    <form className='form' onSubmit={resetPasswordLoggedIn}>\n                                        <label htmlFor='currentPassword'>Current Password: </label>\n                                        <input type='password' name='currentPassword' value={formData.currentPassword} onChange={handleInputChange} />\n                                        <br />\n                                        <span className='error-account'>{formDataError.currentPasswordBool ? formDataError.currentPassword : ''}</span>\n                                        <br />\n                                        <div>\n                                            <label htmlFor='newPassword'>New Password: </label>\n                                            <input type='password' name='newPassword' value={formData.newPassword} onChange={handleInputChange} />\n                                            <br />\n                                            <span className='error-account'>{formDataError.newPasswordBool ? formDataError.newPassword : ''}</span>\n                                            <br />\n                                            <label htmlFor='confirmPassword'>Confirm Password: </label>\n                                            <input type='password' name='confirmPassword' value={formData.confirmPassword} onChange={handleInputChange} />\n                                            <br />\n                                            <span className='error-account'>{formDataError.confirmPasswordBool ? formDataError.confirmPassword : ''}</span>\n                                            <br />\n                                            <button className='btn' type='submit'>Change Password</button>\n                                            <br />\n                                        </div>\n                                        <button className='btn' onClick={() => setShowFormChangePassword(false)}>Close Form</button>\n                                    </form>\n                                </div>\n                            )}\n                        </div>\n                    </div>\n                )}\n            </div>\n        </div>\n\n    );\n}\n\nexport default Account;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}