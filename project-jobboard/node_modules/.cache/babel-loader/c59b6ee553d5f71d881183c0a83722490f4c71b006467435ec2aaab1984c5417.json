{"ast":null,"code":"import axios from 'axios';\naxios.defaults.baseURL = 'http://localhost:8080';\naxios.interceptors.request.use(config => {\n  const token = localStorage.getItem('userToken');\n  if (token) {\n    config.headers['Authorization'] = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n/**\n * Retrieves a list of companies from the API.\n *\n * @return {Promise} A Promise that resolves to the response data.\n */\nfunction getCompanies() {\n  return axios.get('/api/companies');\n}\n\n/**\n * Retrieves a company by its ID.\n *\n * @param {string} id - The ID of the company.\n * @return {Promise} A promise that resolves to the company data.\n */\nfunction getCompanyById(id) {\n  return axios.get(`/api/companies/${id}`);\n}\n\n/**\n * Creates a new company by sending a POST request to the '/api/companies' endpoint.\n *\n * @param {Object} company - The company object containing the details of the company to be created.\n * @return {Promise} Returns a promise that resolves to the response from the server.\n */\nfunction createCompany(company) {\n  return axios.post('/api/companies', company);\n}\n\n/**\n * Updates a company.\n *\n * @param {Object} company - The company object to be updated.\n * @return {Promise} A promise that resolves with the updated company object.\n */\nfunction updateCompany(company) {\n  return axios.put(`/api/companies/`, company);\n}\n\n/**\n * Deletes a company with the specified ID.\n *\n * @param {number} id - The ID of the company to delete.\n * @return {Promise} A promise that resolves to the result of the delete operation.\n */\nfunction deleteCompany(id) {\n  return axios.delete(`/api/companies/${id}`);\n}\nconst CompaniesService = {\n  getCompanies,\n  getCompanyById,\n  createCompany,\n  updateCompany,\n  deleteCompany\n};\nexport default CompaniesService;","map":{"version":3,"names":["axios","defaults","baseURL","interceptors","request","use","config","token","localStorage","getItem","headers","error","Promise","reject","getCompanies","get","getCompanyById","id","createCompany","company","post","updateCompany","put","deleteCompany","delete","CompaniesService"],"sources":["/home/marwan/Projet Groupe Web Piscine/T-WEB-501-LYO_19/project-jobboard/src/Services/CompaniesService.js"],"sourcesContent":["import axios from 'axios';\n\naxios.defaults.baseURL = 'http://localhost:8080';\n\naxios.interceptors.request.use(\n  (config) => {\n      const token = localStorage.getItem('userToken');\n      if (token) {\n          config.headers['Authorization'] = `Bearer ${token}`;\n      }\n      return config;\n  },\n  (error) => {\n      return Promise.reject(error);\n  }\n);\n\n/**\n * Retrieves a list of companies from the API.\n *\n * @return {Promise} A Promise that resolves to the response data.\n */\nfunction getCompanies() {\n    return axios.get('/api/companies')\n}\n\n/**\n * Retrieves a company by its ID.\n *\n * @param {string} id - The ID of the company.\n * @return {Promise} A promise that resolves to the company data.\n */\nfunction getCompanyById(id) {\n    return axios.get(`/api/companies/${id}`);\n}\n\n/**\n * Creates a new company by sending a POST request to the '/api/companies' endpoint.\n *\n * @param {Object} company - The company object containing the details of the company to be created.\n * @return {Promise} Returns a promise that resolves to the response from the server.\n */\nfunction createCompany(company) {\n    return axios.post('/api/companies', company);\n}\n\n/**\n * Updates a company.\n *\n * @param {Object} company - The company object to be updated.\n * @return {Promise} A promise that resolves with the updated company object.\n */\nfunction updateCompany(company) {\n    return axios.put(`/api/companies/`, company);\n}\n\n/**\n * Deletes a company with the specified ID.\n *\n * @param {number} id - The ID of the company to delete.\n * @return {Promise} A promise that resolves to the result of the delete operation.\n */\nfunction deleteCompany(id) {\n    return axios.delete(`/api/companies/${id}`);\n}\n\nconst CompaniesService = {\n        getCompanies,\n        getCompanyById,\n        createCompany,\n        updateCompany,\n    deleteCompany\n};\n\nexport default CompaniesService;"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzBA,KAAK,CAACC,QAAQ,CAACC,OAAO,GAAG,uBAAuB;AAEhDF,KAAK,CAACG,YAAY,CAACC,OAAO,CAACC,GAAG,CAC3BC,MAAM,IAAK;EACR,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC;EAC/C,IAAIF,KAAK,EAAE;IACPD,MAAM,CAACI,OAAO,CAAC,eAAe,CAAC,GAAI,UAASH,KAAM,EAAC;EACvD;EACA,OAAOD,MAAM;AACjB,CAAC,EACAK,KAAK,IAAK;EACP,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAChC,CACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,SAASG,YAAYA,CAAA,EAAG;EACpB,OAAOd,KAAK,CAACe,GAAG,CAAC,gBAAgB,CAAC;AACtC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,cAAcA,CAACC,EAAE,EAAE;EACxB,OAAOjB,KAAK,CAACe,GAAG,CAAE,kBAAiBE,EAAG,EAAC,CAAC;AAC5C;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,aAAaA,CAACC,OAAO,EAAE;EAC5B,OAAOnB,KAAK,CAACoB,IAAI,CAAC,gBAAgB,EAAED,OAAO,CAAC;AAChD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAASE,aAAaA,CAACF,OAAO,EAAE;EAC5B,OAAOnB,KAAK,CAACsB,GAAG,CAAE,iBAAgB,EAAEH,OAAO,CAAC;AAChD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAASI,aAAaA,CAACN,EAAE,EAAE;EACvB,OAAOjB,KAAK,CAACwB,MAAM,CAAE,kBAAiBP,EAAG,EAAC,CAAC;AAC/C;AAEA,MAAMQ,gBAAgB,GAAG;EACjBX,YAAY;EACZE,cAAc;EACdE,aAAa;EACbG,aAAa;EACjBE;AACJ,CAAC;AAED,eAAeE,gBAAgB"},"metadata":{},"sourceType":"module","externalDependencies":[]}